// LESS Utilities //


.boxSizing (@prop: content-box) {
	-webkit-box-sizing: @prop;
	-moz-box-sizing: @prop;
	box-sizing: @prop;
}
.clearfix () {
	&::after{
		display: block;
		width: 0;
		height: 0;
		clear: both;
		content: '';
	}
}
.flex (@flex) {
	-webkit-box-flex: @flex;
	-moz-box-flex: @flex;
	box-flex: @flex;
}
.flexbox (@orient: horizontal, @pack: start, @align: start, @direction: normal, @flex: 0, @lines: single, @flex-group: 1, @ordinal-group: 1) {
	display: -webkit-box;
	-webkit-box-orient: @orient;
	-webkit-box-pack: @pack;
	-webkit-box-align: @align;
	-webkit-box-direction: @direction;
	-webkit-box-flex: @flex;
	-webkit-box-lines: @lines;
	-webkit-box-flex-group: @flex-group;
	-webkit-box-ordinal-group: @ordinal-group;

	display: -moz-box;
	-moz-box-orient: @orient;
	-moz-box-pack: @pack;
	-moz-box-align: @align;
	-moz-box-direction: @direction;
	-moz-box-flex: @flex;
	-moz-box-lines: @lines;
	-moz-box-flex-group: @flex-group;
	-moz-box-ordinal-group: @ordinal-group;

	display: box;
	box-orient: @orient;
	box-pack: @pack;
	box-align: @align;
	box-direction: @direction;
	box-flex: @flex;
	box-lines: @lines;
	box-flex-group: @flex-group;
	box-ordinal-group: @ordinal-group;

	// display: flex;
	// flex-direction: column | column-reverse | *row | row-reverse;
	// justify-content: *flex-start | flex-end | center | space-between | space-around;
	// align-items: flex-start | flex-end | center | baseline | *stretch;
	// align-content: flex-start | flex-end | center | space-between | space-around | *stretch;
	// align-self: *auto | flex-start | flex-end | center | baseline | stretch;
	// flex-basis: *auto | initial | <width>;
	// flex-grow: <number>;
	// flex-shrink: <number>;
	// flex-wrap: *nowrap | wrap | wrap-reverse;
	// order: <integer>;
}
.linearGradient(@dir, @color1, @color2) {
	background: @color1;
	background: -webkit-linear-gradient(@dir, @color1, @color2);
	background: -moz-linear-gradient(@dir, @color1, @color2);
	background: -ms-linear-gradient(@dir, @color1, @color2);
	background: -o-linear-gradient(@dir, @color1, @color2);
	background: linear-gradient(@dir, @color1, @color2);
	
	// assume @color1 and @color2 are in hex
	// assume @color1 is top, @color2 is bottom
	// @alpha1: floor(alpha(@color1) * 255);
	// @alpha1Hex: `parseInt("@{alpha}").toString(16)`;
	// @color1Hex: `;
	
	filter: unquote("progid:DXImageTransform.Microsoft.gradient( startColorstr='#{@color1}', endColorstr='#{@color2}', GradientType=0 )");
}
.noselect {
	-webkit-user-select: none;
	-moz-user-select: -moz-none;
	-o-user-select: none;
	-ms-user-select: none;
	user-select: none;
}
.roundCorners (@tl: 0, @tr: 0, @br: 0, @bl: 0) {
	-webkit-border-radius: @arguments;
	-moz-border-radius: @arguments;
	-ms-border-radius: @arguments;
	-o-border-radius: @arguments;
	border-radius: @arguments;
}
.roundAll (@radius) {
	@include roundCorners(@radius, @radius, @radius, @radius);
}
.roundTop (@radius) {
	@include roundCorners(@radius, @radius, 0, 0);
}
.roundLeft (@radius) {
	@include roundCorners(@radius, 0, 0, @radius);
}
.roundBottom (@radius) {
	@include roundCorners(0, 0, @radius, @radius);
}
.roundRight (@radius) {
	@include roundCorners(0, @radius, @radius, 0);
}
.textShadow (@x: 0, @y: 0, @blur: 0, @color: transparent) {
	@if (length(@color) > 1) {
		text-shadow: zip(@x, @y, @blur, @color);
	} @else {
		text-shadow: @x @y @blur @color;
	}
}
/*
.transition (@prop: all, @dur: 1s, @func: ease, @delay: 0s) {
	@if length(@prop) > 1 {
		@arguments: zip(@prop, @dur, @func, @delay);
	} @else {
		@arguments: @prop @dur @func @delay;
	}
	
	-webkit-transition: @arguments;
	-moz-transition: @arguments;
	-ms-transition: @arguments;
	-o-transition: @arguments;
	transition: @arguments;
}

.noTransition {
	.transition(none, 0s, linear, 0s);
}*/